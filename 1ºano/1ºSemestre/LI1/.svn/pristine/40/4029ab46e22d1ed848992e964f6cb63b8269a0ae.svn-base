-- | Este módulo define funções comuns da Tarefa 1 do trabalho prático.
module Tarefa1_2018li1g002 where

import LI11819
import Tarefa0_2018li1g002

-- * Testes

-- | Testes unitários da Tarefa 1.
--
-- Cada teste é uma sequência de 'Instrucoes'.
testesT1 :: [Instrucoes]
testesT1 = []

-- * Funções principais da Tarefa 1.

-- | Aplica uma 'Instrucao' num 'Editor'.
--
--    * 'Move' - move numa dada 'Direcao'.
--
--    * 'MudaTetromino' - seleciona a 'Peca' seguinte (usar a ordem léxica na estrutura de dados),
--       sem alterar os outros parâmetros.
--
--    * 'MudaParede' - muda o tipo de 'Parede'.
--
--    * 'Desenha' - altera o 'Mapa' para incluir o 'Tetromino' atual, sem alterar os outros parâmetros.
instrucao :: Instrucao -- ^ A 'Instrucao' a aplicar.
          -> Editor    -- ^ O 'Editor' anterior.
          -> Editor    -- ^ O 'Editor' resultante após aplicar a 'Instrucao'.
instrucao Roda e = e{direcaoEditor = rodaDirecao (direcaoEditor e)}
instrucao MudaTetromino e = e{tetrominoEditor = mudaTetromino (tetrominoEditor e)}
instrucao MudaParede e = e{paredeEditor = trocaParede (paredeEditor e)}
instrucao (Move d) e = e{posicaoEditor = somaVetores (direcaoParaVetor d) (posicaoEditor e)}
instrucao Desenha e = e{mapaEditor = recebeDesenha pos peca mapa}
            where
              pos = buscarPosicao tetrominoParaMatriz e
              peca = Bloco Destrutivel || Bloco Indestrutivel
              mapa = mapaEditor e

{--Bucar a posicoes onde o tetromino vai ser aplicado 
(ou seja, as posicoes na matriz do tetromino onde seja True)--}
buscarPosicao :: Matriz Bool -> [Posicao]
buscarPosicao [] = []
buscarPosicao l = aux (0,0) l

aux :: Posicao -> Matriz Bool -> [Posicao]
aux (x,y) [] =[]
aux (x,y) ([]:t) = aux (x+1,0) t
aux (x,y) ((h:xs):t) | h==True && length ((h:xs):t)/=0 = (x,y):aux (x,y+1) (xs:t)
                     | h/=True && length ((h:xs):t)/=0 = aux (x,y+1) (xs:t)
                     | otherwise = []

{--Recebe as posicoes onde o tetromino é True e Desenha(ou seja, altera o tipo de peca do mapa
com Blocos Destrutiveis/Indestrutiveis nessas posiçoes recebidas no Mapa--}
recebeDesenha :: [Posicao] -> Peca -> Mapa -> Mapa
recebeDesenha [] (Bloco Indestrutivel) a = a
recebeDesenha [] (Bloco Destrutivel) a = a
recebeDesenha (h:t) (Bloco Indestrutivel) a = recebeDesenha t (atualizaPosicaoMatriz h (Bloco Indestrutivel) a)
recebeDesenha (h:t) (Bloco Destrutivel) a = recebeDesenha t (atualizaPosicaoMatriz h (Bloco Destrutivel) a)


--Trocar o tipo de parede
trocaParede :: Parede -> Parede
trocaParede Indestrutivel = Destrutivel
trocaParede Destrutivel = Indestrutivel

--Mudar o tipo de tetromino
mudaTetromino :: Tetromino -> Tetromino
mudaTetromino I = J
mudaTetromino J = L
mudaTetromino L = O
mudaTetromino O = S
mudaTetromino S = T
mudaTetromino T = Z
mudaTetromino Z = I

--
rodaDirecao :: Direcao -> Direcao
rodaDirecao C = D
rodaDirecao D = B
rodaDirecao B = E
rodaDirecao E = C

-- | Aplica uma sequência de 'Instrucoes' num 'Editor'.
--
-- __NB:__ Deve chamar a função 'instrucao'.
instrucoes :: Instrucoes -- ^ As 'Instrucoes' a aplicar.
           -> Editor     -- ^ O 'Editor' anterior.
           -> Editor     -- ^ O 'Editor' resultante após aplicar as 'Instrucoes'.
instrucoes = undefined

-- | Cria um 'Mapa' inicial com 'Parede's nas bordas e o resto vazio.
mapaInicial :: Dimensao -- ^ A 'Dimensao' do 'Mapa' a criar.
            -> Mapa     -- ^ O 'Mapa' resultante com a 'Dimensao' dada.
mapaInicial = undefined

-- | Cria um 'Editor' inicial.
--
-- __NB:__ Deve chamar as funções 'mapaInicial', 'dimensaoInicial', e 'posicaoInicial'.
editorInicial :: Instrucoes  -- ^ Uma sequência de 'Instrucoes' de forma a poder calcular a  'dimensaoInicial' e a 'posicaoInicial'.
              -> Editor      -- ^ O 'Editor' inicial, usando a 'Peca' 'I' 'Indestrutivel' voltada para 'C'.
editorInicial = undefined

-- | Constrói um 'Mapa' dada uma sequência de 'Instrucoes'.
--
-- __NB:__ Deve chamar as funções 'Instrucoes' e 'editorInicial'.
constroi :: Instrucoes -- ^ Uma sequência de 'Instrucoes' dadas a um 'Editor' para construir um 'Mapa'.
         -> Mapa       -- ^ O 'Mapa' resultante.
constroi is = undefined





